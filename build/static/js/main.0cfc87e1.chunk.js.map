{"version":3,"sources":["Button/index.js","Navigation/index.js","Title/index.js","Label/index.js","Input/index.js","Popup-reset/index.js","Form/BaseStep.js","Form/index.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","onClick","className","type","children","Navigation","onChangeStep","href","Title","Label","Input","onChange","name","value","Popup","onConfirm","onCancel","countries","title","state","city","defaultValues","username","lastname","email","userId","phone","referenceCode","BaseStep","modal","handleInput","e","setState","target","handleFocus","currentField","handleReset","handleConfirm","resetAll","handleCancel","handleSubmit","preventDefault","console","log","method","onFocus","this","required","map","country","key","React","Component","Form","activeStep","handleChangeStep","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0cfc87e1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './../App.css';\n\nconst Button = props => (\n    <button\n        onClick = {props.onClick}\n        className={props.className}\n        type={props.type}\n    >\n        {props.children}\n    </button>\n);\n\nButton.propTypes = {\n    className: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    children: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired,\n};\n\nexport default Button;","import React from 'react';\nimport './../App.css';\nimport PropTypes from \"prop-types\";\nimport Button from \"../Button\";\n\nconst Navigation = (props) => (\n    <section className=\"navigation-form\">\n        <a\n            onClick={() => props.onChangeStep(1)}\n            href=\"#\"\n            className=\"arrow arrow-up\"\n        >\n            up\n        </a>\n        <div className=\"animation-block\">\n            <span className=\"animation-block__element\">elem</span>\n            <span className=\"animation-block__element\">elem</span>\n            <span className=\"animation-block__element active-element\">elem</span>\n            <span className=\"animation-block__element\">elem</span>\n        </div>\n        <a\n            onClick={() => props.onChangeStep(2)}\n            href=\"#\"\n            className=\"arrow arrow-down\"\n        >\n            down\n        </a>\n    </section>\n);\n\nNavigation.propTypes = {\n    onClick: PropTypes.func,\n};\n\nexport default Navigation;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './../App.css';\n\nconst Title = props => (\n    <h1 className=\"main-title\">{props.children}</h1>\n);\n\nTitle.propTypes = {\n    children: PropTypes.string.isRequired,\n};\n\nexport default Title;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './../App.css';\n\nconst Label = props => (\n    <label className=\"label\">{props.children}</label>\n);\n\nLabel.propTypes = {\n    children: PropTypes.string.isRequired,\n};\n\nexport default Label;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './../App.css';\n\nconst Input = props => (\n    <input\n        onChange={props.onChange}\n        type={props.type}\n        className=\"input\"\n        name={props.name}\n        value={props.value}\n    />\n);\n\nInput.propTypes = {\n    type: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    name: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n};\n\nexport default Input;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Title from '../Title/index';\nimport Button from \"../Button\";\nimport './../App.css';\nimport Navigation from \"../Navigation\";\n\nconst Popup = props => (\n    <section className=\"popup-reset\">\n    \t<Title>Вы точно хотите очистить поля?</Title>\n        <div className=\"buttons\">\n            <Button onClick={props.onConfirm} className=\"form__reset\" type=\"button\">Reset All</Button>\n            <Button onClick={props.onCancel} className=\"form__continue\" type=\"button\">Cancel</Button>\n        </div>\n    </section>\n);\n\nPopup.propTypes = {\n    onClick: PropTypes.func,\n};\n\nexport default Popup;","import React from 'react';\nimport Title from '../Title';\nimport Label from '../Label';\nimport Input from '../Input';\nimport Button from '../Button';\nimport Popup from '../Popup-reset';\nimport '../App.css';\n\nconst countries = [\n    {\n        title: 'India',\n        value: 'india'\n    },\n    {\n        title: 'USA',\n        value: 'usa'\n    },\n    {\n        title: 'Great Britain',\n        value: 'great-britain',\n    },\n    {\n        title: 'Germany',\n        value: 'germany'\n    },\n];\n\nconst state = [\n    {\n        title: 'Maharashtra',\n        value: 'maharashtra'\n    },\n    {\n        title: 'Alabama',\n        value: 'alabama'\n    },\n    {\n        title: 'Alaska',\n        value: 'alaska',\n    },\n    {\n        title: 'Colorado',\n        value: 'colorado'\n    },\n];\n\nconst city = [\n    {\n        title: 'Pune',\n        value: 'pune'\n    },\n    {\n        title: 'London',\n        value: 'london'\n    },\n    {\n        title: 'Glasgow',\n        value: 'glasgow',\n    },\n    {\n        title: 'Liverpool',\n        value: 'liverpool'\n    },\n];\n\nconst defaultValues = {\n    username: '',\n    lastname: '',\n    email: '',\n    userId: '',\n    countries: countries[0].value,\n    state: state[0].value,\n    city: city[0].value,\n    phone: '',\n    referenceCode: '',\n};\n\nclass BaseStep extends React.Component {\n    state = {\n        modal: false,\n        ...defaultValues,\n    };\n\n    handleInput = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value,\n        })\n    };\n\n    handleFocus = (e) => {\n        this.setState({\n            currentField: e.target.name,\n        })\n    };\n\n    handleReset = () => {\n        this.setState({\n            modal: true,\n        })\n    };\n\n    handleConfirm = () => {\n        this.resetAll();\n        this.setState({\n            modal: false,\n        })\n    };\n\n    handleCancel = () => {\n        this.setState({\n            modal: false,\n        });\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(this.state);\n        this.props.onChangeStep(2);\n    };\n\n    resetAll = () => {\n        this.setState({\n            ...defaultValues\n        })\n    };\n\n    render() {\n        return(\n            <form\n                method=\"post\"\n                className=\"form\"\n                onFocus={this.handleFocus}\n            >\n                <Title>Basic Details</Title>\n                <div className=\"form__content\">\n                    <div className=\"form__section\">\n                        <Input\n                            onChange={this.handleInput}\n                            name=\"username\"\n                            type=\"text\"\n                            required\n                            value={this.state.username}\n                        />\n                        <Label>\n                            First Name\n                        </Label>\n                    </div>\n                    <div className=\"form__section\">\n                        <Input\n                            onChange={this.handleInput}\n                            name=\"lastname\"\n                            type=\"text\"\n                            required\n                            value={this.state.lastname}\n                        />\n                        <Label>Last Name</Label>\n                    </div>\n                    <div className=\"form__section\">\n                        <Input\n                            onChange={this.handleInput}\n                            name=\"email\"\n                            type=\"email\"\n                            required\n                            value={this.state.email}\n                        />\n                        <Label>Email ID</Label>\n                    </div>\n                    <div className=\"form__section\">\n                        <Input\n                            onChange={this.handleInput}\n                            name=\"userId\"\n                            type=\"text\"\n                            required\n                            value={this.state.userId}\n                        />\n                        <Label>Your User ID</Label>\n                    </div>\n                    <div className=\"form__section\">\n                        <select onChange={this.handleInput} name=\"countries\" className=\"form__countries\" value={this.state.countries}>\n                            { countries.map(country => (\n                                <option key={country.value} value={country.value}>{country.title}</option>\n                            ))}\n                        </select>\n                        <Label>Country</Label>\n                    </div>\n                    <div className=\"form__section form__section--city\">\n                        <div className=\"form__changing-city\">\n                            <select onChange={this.handleInput} name=\"state\" className=\"form__countries form__places\" value={this.state.state}>\n                                { state.map(country => (\n                                    <option key={country.value} value={country.value}>{country.title}</option>\n                                ))}\n                            </select>\n                            <Label>State</Label>\n                        </div>\n                        <div className=\"form__changing-city\">\n                            <select onChange={this.handleInput} name=\"city\" className=\"form__countries form__places\" value={this.state.city}>\n                                { city.map(country => (\n                                    <option key={country.value} value={country.value}>{country.title}</option>\n                                ))}\n                            </select>\n                            <Label>City</Label>\n                        </div>\n                    </div>\n                    <div className=\"form__section\">\n                        <Input\n                            name=\"phone\"\n                            onChange={this.handleInput}\n                            type=\"tel\"\n                            required\n                            value={this.state.phone}\n                        />\n                        <Label>Phone Number</Label>\n                    </div>\n                    <div className=\"form__section\">\n                        <Input\n                            onChange={this.handleInput}\n                            name=\"referenceCode\"\n                            type=\"text\"\n                            value={this.state.referenceCode}\n                        />\n                    </div>\n                </div>\n                <div className=\"form__buttons\">\n                    <Button onClick={this.handleReset} className=\"form__reset\" type=\"button\">Reset All</Button>\n                    <Button onClick={this.handleSubmit} className=\"form__continue\" type=\"submit\">Continue</Button>\n                </div>\n\n                {\n                    this.state.modal && <Popup onConfirm={this.handleConfirm} onCancel={this.handleCancel} />\n                }\n            </form>\n        )\n    }\n}\n\nexport default BaseStep;","import React from 'react';\nimport BaseStep from './BaseStep';\nimport Title from '../Title';\nimport '../App.css';\n\nclass Form extends React.Component {\n    render() {\n        return(\n            <>\n                { this.props.activeStep === 1 && <BaseStep onChangeStep={this.props.onChangeStep} /> }\n                { this.props.activeStep === 2 && <div className=\"next-step\" onClick={() => this.handleChangeStep(1)}>\n                    <Title>Next Step</Title>\n                </div>}\n            </>\n        )\n    }\n}\n\nexport default Form;","import React from 'react';\nimport Navigation from './Navigation';\nimport Form from './Form/index';\nimport './App.css';\n\nclass App extends React.Component {\n    state = {\n        activeStep: 1,\n    };\n\n    handleChangeStep = (activeStep) => {\n        this.setState({\n            activeStep\n        })\n    };\n\n    render()  {\n        return (\n            <div className=\"app\">\n                <section className=\"information-form\">\n                    <Navigation onChangeStep={this.handleChangeStep} activeStep={this.state.activeStep} />\n                    <Form onChangeStep={this.handleChangeStep} activeStep={this.state.activeStep} />\n                </section>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}