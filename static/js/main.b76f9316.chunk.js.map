{"version":3,"sources":["Components/Button/index.js","Components/Navigation/index.js","Components/Title/index.js","Components/Label/index.js","Components/Input/index.js","Components/Popup-reset/index.js","services/validator.js","Components/Form/BaseStep.js","Components/Form/index.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","onClick","className","type","children","Navigation","onChangeStep","href","Title","Label","Input","onChange","onBlur","name","value","Popup","onConfirm","onCancel","REG_EXP","EMAIL","ONLY_ENGLISH_LETTER","ONLY_ENGLISH_LETTER_OR_SPACE","ONLY_PHONE_NUMBER","ONLY_ENGLISH_LETTER_OR_NUMBERS","validateMinValue","min","validateMaxValue","max","validateEmail","email","test","toLowerCase","validateOnlyEnglishLetter","validateOnlyEnglishLetterOrSpace","validatePhoneNumber","validateEnglishLettersOrNumbers","countries","title","state","city","defaultValues","username","lastname","userId","phone","referenceCode","errors","BaseStep","modal","setError","prop","text","setState","validateName","evt","validator","target","length","validateLastName","validateUserId","validatePhone","validateReferenceCode","handleInput","e","handleFocus","currentField","handleReset","handleConfirm","resetAll","handleCancel","handleSubmit","preventDefault","console","log","method","onFocus","this","required","map","country","key","React","Component","Form","activeStep","handleChangeStep","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b76f9316.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../../App.css';\n\nconst Button = props => (\n    <button\n        onClick = {props.onClick}\n        className={props.className}\n        type={props.type}\n    >\n        {props.children}\n    </button>\n);\n\nButton.propTypes = {\n    className: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    children: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired,\n};\n\nexport default Button;","import React from 'react';\nimport '../../App.css';\nimport PropTypes from \"prop-types\";\nimport Button from \"../Button\";\n\nconst Navigation = (props) => (\n    <section className=\"navigation-form\">\n        <a\n            onClick={() => props.onChangeStep(1)}\n            href=\"#\"\n            className=\"arrow arrow-up\"\n        >\n            up\n        </a>\n        <div className=\"animation-block\">\n            <span className=\"animation-block__element\">elem</span>\n            <span className=\"animation-block__element\">elem</span>\n            <span className=\"animation-block__element active-element\">elem</span>\n            <span className=\"animation-block__element\">elem</span>\n        </div>\n        <a\n            onClick={() => props.onChangeStep(2)}\n            href=\"#\"\n            className=\"arrow arrow-down\"\n        >\n            down\n        </a>\n    </section>\n);\n\nNavigation.propTypes = {\n    onClick: PropTypes.func,\n};\n\nexport default Navigation;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../../App.css';\n\nconst Title = props => (\n    <h1 className=\"main-title\">{props.children}</h1>\n);\n\nTitle.propTypes = {\n    children: PropTypes.string.isRequired,\n};\n\nexport default Title;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../../App.css';\n\nconst Label = props => (\n    <label className=\"label\">{props.children}</label>\n);\n\nLabel.propTypes = {\n    children: PropTypes.string.isRequired,\n};\n\nexport default Label;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../../App.css';\n\nconst Input = props => (\n    <input\n        onChange={props.onChange}\n        onBlur={props.onBlur}\n        type={props.type}\n        className=\"input\"\n        name={props.name}\n        value={props.value}\n    />\n);\n\nInput.propTypes = {\n    type: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    name: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n};\n\nexport default Input;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Title from '../Title';\nimport Button from \"../Button\";\nimport '../../App.css';\nimport Navigation from \"../Navigation\";\n\nconst Popup = props => (\n    <section className=\"popup-reset\">\n    \t<Title>Вы точно хотите очистить поля?</Title>\n        <div className=\"buttons\">\n            <Button onClick={props.onConfirm} className=\"form__reset\" type=\"button\">Reset All</Button>\n            <Button onClick={props.onCancel} className=\"form__continue\" type=\"button\">Cancel</Button>\n        </div>\n    </section>\n);\n\nPopup.propTypes = {\n    onClick: PropTypes.func,\n};\n\nexport default Popup;","var REG_EXP = {\n    EMAIL: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n    ONLY_ENGLISH_LETTER: /^[a-zA-Z]+$/,\n    ONLY_ENGLISH_LETTER_OR_SPACE: /^[a-zA-Z ]+$/,\n    ONLY_PHONE_NUMBER: /^\\+?3?8?(0[5-9][1-8]\\d{7})$/,\n    ONLY_ENGLISH_LETTER_OR_NUMBERS: /^[a-zA-Z0-9]+$/\n}\n\nfunction validateMinValue(value, min) {\n    return value < min;\n}\n\nfunction validateMaxValue(value, max) {\n    return value > max;\n}\n\nfunction validateEmail(email) {\n    return REG_EXP.EMAIL.test(email.toLowerCase());\n}\n\nfunction validateOnlyEnglishLetter(value) {\n    return REG_EXP.ONLY_ENGLISH_LETTER.test(value.toLowerCase());\n}\n\nfunction validateOnlyEnglishLetterOrSpace(value) {\n    return REG_EXP.ONLY_ENGLISH_LETTER_OR_SPACE.test(value.toLowerCase());\n}\n\nfunction validatePhoneNumber(value) {\n    return REG_EXP.ONLY_PHONE_NUMBER.test(value.toLowerCase());\n}\n\nfunction validateEnglishLettersOrNumbers(value) {\n    return REG_EXP.ONLY_ENGLISH_LETTER_OR_NUMBERS.test(value.toLowerCase());\n}\n\nexport default {\n    validateMinValue,\n    validateMaxValue,\n    validateEmail,\n    validateOnlyEnglishLetter,\n    validateOnlyEnglishLetterOrSpace,\n    validatePhoneNumber,\n    validateEnglishLettersOrNumbers,\n}","import React from 'react';\nimport Title from '../Title';\nimport Label from '../Label';\nimport Input from '../Input';\nimport Button from '../Button';\nimport Popup from '../Popup-reset';\nimport validator from '../../services/validator';\nimport '../../App.css';\n\nconst countries = [\n    {\n        title: 'India',\n        value: 'india'\n    },\n    {\n        title: 'USA',\n        value: 'usa'\n    },\n    {\n        title: 'Great Britain',\n        value: 'great-britain',\n    },\n    {\n        title: 'Germany',\n        value: 'germany'\n    },\n];\n\nconst state = [\n    {\n        title: 'Maharashtra',\n        value: 'maharashtra'\n    },\n    {\n        title: 'Alabama',\n        value: 'alabama'\n    },\n    {\n        title: 'Alaska',\n        value: 'alaska',\n    },\n    {\n        title: 'Colorado',\n        value: 'colorado'\n    },\n];\n\nconst city = [\n    {\n        title: 'Pune',\n        value: 'pune'\n    },\n    {\n        title: 'London',\n        value: 'london'\n    },\n    {\n        title: 'Glasgow',\n        value: 'glasgow',\n    },\n    {\n        title: 'Liverpool',\n        value: 'liverpool'\n    },\n];\n\nconst defaultValues = {\n    username: '',\n    lastname: '',\n    email: '',\n    userId: '',\n    countries: countries[0].value,\n    state: state[0].value,\n    city: city[0].value,\n    phone: '',\n    referenceCode: '',\n    errors: {}\n};\n\nclass BaseStep extends React.Component {\n    state = {\n        modal: false,\n        errors: {},\n        ...defaultValues,\n    };\n\n    setError = (prop, text) => {\n        this.setState({\n            errors: {\n                ...this.state.errors,\n                [prop]: text,\n            }\n        })\n    };\n\n    validateName = (evt) => {\n        if (validator.validateMinValue(evt.target.value.length, 2)) {\n            this.setError('name', 'Should be more than 2');\n            return;\n        }\n\n        if (validator.validateMaxValue(evt.target.value.length, 50)) {\n            this.setError('name', 'Should be less than 50');\n            return;\n        }\n\n        if (!validator.validateOnlyEnglishLetter(evt.target.value)) {\n            this.setError('name', 'Should be only english letter');\n            return;\n        }\n\n        this.setError('name', null);\n    };\n\n    validateLastName = (evt) => {\n        if (validator.validateMinValue(evt.target.value.length, 2)) {\n            this.setError('lastname', 'Should be more than 2');\n            return;\n        }\n\n        if (validator.validateMaxValue(evt.target.value.length, 50)) {\n            this.setError('lastname', 'Should be less than 50');\n            return;\n        }\n\n        if (!validator.validateOnlyEnglishLetter(evt.target.value)) {\n            this.setError('lastname', 'Should be only english letter');\n            return;\n        }\n\n        this.setError('lastname', null);\n    };\n\n    validateEmail = (evt) => {\n        if (!evt.target.value) {\n            this.setError('email', 'Email is required field');\n            return;\n        }\n        if (!validator.validateEmail(evt.target.value)) {\n            this.setError('email', 'Should be valid email');\n            return;\n        }\n\n        if (validator.validateMaxValue(evt.target.value.length, 255)) {\n            this.setError('email', 'Should be less than 255');\n            return;\n        }\n\n        this.setError('email', null);\n    }\n\n    validateUserId = (evt) => {\n        if (!evt.target.value) {\n            this.setError('userId', 'userId is required field');\n            return;\n        }\n\n        if (validator.validateMinValue(evt.target.value.length, 5)) {\n            this.setError('userId', 'Should be more than 5');\n            return;\n        }\n\n        if (validator.validateMaxValue(evt.target.value.length, 30)) {\n            this.setError('userId', 'userId be less than 255');\n            return;\n        }\n\n        if (!validator.validateOnlyEnglishLetterOrSpace(evt.target.value)) {\n            this.setError('userId', 'Should be only english letter or space');\n            return;\n        }\n\n        this.setError('userId', null);\n    }\n\n    validatePhone = (evt) => {\n        if (!evt.target.value) {\n            this.setError('phone', 'phone is required field');\n            return;\n        }\n\n        if (!validator.validatePhoneNumber(evt.target.value)) {\n            this.setError('phone', 'use only valid ukrainian phone numbers');\n            return;\n        }\n\n        this.setError('phone', null);\n    }\n\n    validateReferenceCode = (evt) => {\n        if (evt.target.value.length !== 10) {\n            this.setError('referenceCode', 'reference code should have 10 letters');\n            return;\n        }\n\n        if (!validator.validateEnglishLettersOrNumbers(evt.target.value)) {\n            this.setError('referenceCode', 'Should be only english letter or numbers');\n            return;\n        }\n\n        this.setError('referenceCode', null);\n    }\n\n    handleInput = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value,\n        })\n    };\n\n    handleFocus = (e) => {\n        this.setState({\n            currentField: e.target.name,\n        })\n    };\n\n    handleReset = () => {\n        this.setState({\n            modal: true,\n        })\n    };\n\n    handleConfirm = () => {\n        this.resetAll();\n        this.setState({\n            modal: false,\n        })\n    };\n\n    handleCancel = () => {\n        this.setState({\n            modal: false,\n        });\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(this.state);\n        this.props.onChangeStep(2);\n    };\n\n    resetAll = () => {\n        this.setState({\n            ...defaultValues\n        })\n    };\n\n    render() {\n        return(\n            <form\n                method=\"post\"\n                className=\"form\"\n                onFocus={this.handleFocus}\n            >\n                <Title>Basic Details</Title>\n                <div className=\"form__content\">\n                    <div className=\"form__section\">\n                        <Input\n                            onChange={this.handleInput}\n                            onBlur={this.validateName}\n                            name=\"username\"\n                            type=\"text\"\n                            required\n                            value={this.state.username}\n                        />\n                        <Label>\n                            First Name\n                        </Label>\n                        <span className=\"error-text\">{this.state.errors.name}</span>\n                        {this.state.errors.name ? <span className=\"error\">with failed icon</span> : <span className=\"true\">with passed icon</span>}\n                    </div>\n                    <div className=\"form__section\">\n                        <Input\n                            onChange={this.handleInput}\n                            onBlur={this.validateLastName}\n                            name=\"lastname\"\n                            type=\"text\"\n                            required\n                            value={this.state.lastname}\n                        />\n                        <Label>Last Name</Label>\n                        <span className=\"error-text\">{this.state.errors.lastname}</span>\n                        {this.state.errors.lastname ? <span className=\"error\">with failed icon</span> : <span className=\"true\">with passed icon</span>}\n                    </div>\n                    <div className=\"form__section\">\n                        <Input\n                            onChange={this.handleInput}\n                            onBlur={this.validateEmail}\n                            name=\"email\"\n                            type=\"email\"\n                            required\n                            value={this.state.email}\n                        />\n                        <Label>Email ID</Label>\n                        <span className=\"error-text\">{this.state.errors.email}</span>\n                        {this.state.errors.email ? <span className=\"error\">with failed icon</span> : <span className=\"true\">with passed icon</span>}\n                    </div>\n                    <div className=\"form__section\">\n                        <Input\n                            onChange={this.handleInput}\n                            onBlur={this.validateUserId}\n                            name=\"userId\"\n                            type=\"text\"\n                            required\n                            value={this.state.userId}\n                        />\n                        <Label>Your User ID</Label>\n                        <span className=\"error-text\">{this.state.errors.userId}</span>\n                        {this.state.errors.userId ? <span className=\"error\">with failed icon</span> : <span className=\"true\">with passed icon</span>}\n                    </div>\n                    <div className=\"form__section\">\n                        <select onChange={this.handleInput} name=\"countries\" className=\"form__countries\" value={this.state.countries}>\n                            { countries.map(country => (\n                                <option key={country.value} value={country.value}>{country.title}</option>\n                            ))}\n                        </select>\n                        <Label>Country</Label>\n                    </div>\n                    <div className=\"form__section form__section--city\">\n                        <div className=\"form__changing-city\">\n                            <select onChange={this.handleInput} name=\"state\" className=\"form__countries form__places\" value={this.state.state}>\n                                { state.map(country => (\n                                    <option key={country.value} value={country.value}>{country.title}</option>\n                                ))}\n                            </select>\n                            <Label>State</Label>\n                        </div>\n                        <div className=\"form__changing-city\">\n                            <select onChange={this.handleInput} name=\"city\" className=\"form__countries form__places\" value={this.state.city}>\n                                { city.map(country => (\n                                    <option key={country.value} value={country.value}>{country.title}</option>\n                                ))}\n                            </select>\n                            <Label>City</Label>\n                        </div>\n                    </div>\n                    <div className=\"form__section\">\n                        <Input\n                            name=\"phone\"\n                            onBlur={this.validatePhone}\n                            onChange={this.handleInput}\n                            type=\"tel\"\n                            required\n                            value={this.state.phone}\n                        />\n                        <Label>Phone Number</Label>\n                        <span className=\"error-text\">{this.state.errors.phone}</span>\n                        {this.state.errors.phone ? <span className=\"error\">with failed icon</span> : <span className=\"true\">with passed icon</span>}\n                    </div>\n                    <div className=\"form__section\">\n                        <Input\n                            onChange={this.handleInput}\n                            onBlur={this.validateReferenceCode}\n                            name=\"referenceCode\"\n                            type=\"text\"\n                            value={this.state.referenceCode}\n                        />\n\n                        <span className=\"error-text\">{this.state.errors.referenceCode}</span>\n                        {this.state.errors.referenceCode ? <span className=\"error\">with failed icon</span> : <span className=\"true\">with passed icon</span>}\n                    </div>\n                </div>\n                <div className=\"form__buttons\">\n                    <Button onClick={this.handleReset} className=\"form__reset\" type=\"button\">Reset All</Button>\n                    <Button onClick={this.handleSubmit} className=\"form__continue\" type=\"submit\">Continue</Button>\n                </div>\n\n                {\n                    this.state.modal && <Popup onConfirm={this.handleConfirm} onCancel={this.handleCancel} />\n                }\n            </form>\n        )\n    }\n}\n\nexport default BaseStep;","import React from 'react';\nimport BaseStep from './BaseStep';\nimport Title from '../Title';\nimport '../../App.css';\n\nclass Form extends React.Component {\n    render() {\n        return(\n            <>\n                { this.props.activeStep === 1 && <BaseStep onChangeStep={this.props.onChangeStep} /> }\n                { this.props.activeStep === 2 && <div className=\"next-step\" onClick={() => this.handleChangeStep(1)}>\n                    <Title>Next Step</Title>\n                </div>}\n            </>\n        )\n    }\n}\n\nexport default Form;","import React from 'react';\nimport Navigation from './Components/Navigation';\nimport Form from './Components/Form/index';\nimport './App.css';\n\nclass App extends React.Component {\n    state = {\n        activeStep: 1,\n    };\n\n    handleChangeStep = (activeStep) => {\n        this.setState({\n            activeStep\n        })\n    };\n\n    render()  {\n        return (\n            <div className=\"app\">\n                <section className=\"information-form\">\n                    <Navigation onChangeStep={this.handleChangeStep} activeStep={this.state.activeStep} />\n                    <Form onChangeStep={this.handleChangeStep} activeStep={this.state.activeStep} />\n                </section>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}